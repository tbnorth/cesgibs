// Generated by CoffeeScript 1.6.3
var cesgibs_init, last_date, last_date_change_time, map_time;

last_date_change_time = Date.now();

last_date = null;

map_time = function(layer_name) {
  var func;
  console.log("Building", layer_name);
  func = function() {
    var cull, culls, layer, layers, n, prov, time, _i, _j, _len, _ref;
    time = Cesium.JulianDate.toGregorianDate(viewer.clock.currentTime);
    time = "" + time.year + "-" + ('0' + time.month).slice(-2) + "-" + ('0' + time.day).slice(-2);
    layers = viewer.scene.imageryLayers;
    culls = [];
    for (n = _i = 0, _ref = layers.length; 0 <= _ref ? _i <= _ref : _i >= _ref; n = 0 <= _ref ? ++_i : --_i) {
      layer = layers.get(n);
      if (!layer) {
        continue;
      }
      if (layer.imageryProvider._date_loader) {
        culls.push(layer);
      }
    }
    for (_j = 0, _len = culls.length; _j < _len; _j++) {
      cull = culls[_j];
      layers.remove(cull);
    }
    prov = new Cesium.WebMapTileServiceImageryProvider({
      url: "//map1.vis.earthdata.nasa.gov/wmts-geo/wmts.cgi?TIME=" + time,
      layer: layer_name,
      style: "",
      format: "image/jpeg",
      tileMatrixSetID: "EPSG4326_250m",
      maximumLevel: 8,
      tileWidth: 256,
      tileHeight: 256,
      tilingScheme: gibs.GeographicTilingScheme()
    });
    prov._date_loader = func;
    viewer._cesgibs_active = true;
    return prov;
  };
  return func;
};

cesgibs_init = function() {
  var arr, gibs_layers, layer, _i, _len;
  gibs_layers = [
    {
      name: 'Terra imagery',
      tooltip: "Daily MODIS Terra images",
      layer_name: "MODIS_Terra_CorrectedReflectance_TrueColor"
    }, {
      name: 'Aqua imagery',
      tooltip: "Daily MODIS Aqua images",
      layer_name: "MODIS_Aqua_CorrectedReflectance_TrueColor"
    }
  ];
  last_date = Cesium.JulianDate.toGregorianDate(viewer.clock.currentTime);
  arr = viewer.baseLayerPicker.viewModel.imageryProviderViewModels;
  for (_i = 0, _len = gibs_layers.length; _i < _len; _i++) {
    layer = gibs_layers[_i];
    console.log(layer);
    console.log('YY', layer.layer_name);
    arr.push(new Cesium.ProviderViewModel({
      name: layer.name,
      tooltip: layer.tooltip,
      iconUrl: "http://cesiumjs.org/releases/1.26/Build/Cesium/Widgets/Images/ImageryProviders/mapboxSatellite.png",
      creationFunction: map_time(layer.layer_name)
    }));
    console.log('XX', layer.layer_name);
  }
  return viewer.clock.onTick.addEventListener(function() {
    var base_layer_seen, day_change, layers, n, new_layer, now, our_layer, _j, _k, _ref, _ref1, _results;
    if (!viewer._cesgibs_active) {
      return;
    }
    now = Date.now();
    if (now - last_date_change_time < 1000) {
      return;
    }
    last_date_change_time = now;
    layers = viewer.scene.imageryLayers;
    base_layer_seen = false;
    our_layer = null;
    for (n = _j = 0, _ref = layers.length; 0 <= _ref ? _j <= _ref : _j >= _ref; n = 0 <= _ref ? ++_j : --_j) {
      layer = layers.get(n);
      if (!layer) {
        continue;
      }
      if (layer._isBaseLayer && !layer.imageryProvider._date_loader) {
        base_layer_seen = true;
      }
      if (layer.imageryProvider._date_loader) {
        our_layer = layer;
      }
    }
    if (base_layer_seen && our_layer) {
      viewer.scene.imageryLayers.remove(our_layer);
      viewer._cesgibs_active = false;
      return;
    }
    now = Cesium.JulianDate.toGregorianDate(viewer.clock.currentTime);
    day_change = now.day !== last_date.day || now.month !== last_date.month || now.year !== last_date.year;
    if (day_change) {
      last_date = now;
      _results = [];
      for (n = _k = 0, _ref1 = layers.length; 0 <= _ref1 ? _k <= _ref1 : _k >= _ref1; n = 0 <= _ref1 ? ++_k : --_k) {
        layer = layers.get(n);
        if (layer && layer.imageryProvider._date_loader) {
          layers.remove(layer);
          new_layer = new Cesium.ImageryLayer(layer.imageryProvider._date_loader());
          layers.add(new_layer);
          break;
        } else {
          _results.push(void 0);
        }
      }
      return _results;
    }
  });
};
